{"version":3,"file":"email.controller.js","sourceRoot":"","sources":["../../src/email/email.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Delete,\n  Param,\n  Body,\n  BadRequestException,\n} from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('email')\n@Controller('email')\nexport class EmailController {\n  constructor(private readonly emailService: EmailService) {}\n\n  @Post('generate')\n  async generateEmail() {\n    return { email: await this.emailService.generateEmail() };\n  }\n\n  @Get(':email/messages')\n  async getMessages(@Param('email') email: string) {\n    return await this.emailService.getMessages(email);\n  }\n\n  @Get(':email/messages/:messageId')\n  async getMessage(\n    @Param('email') email: string,\n    @Param('messageId') messageId: string,\n  ) {\n    return await this.emailService.getMessage(email, messageId);\n  }\n\n  @Post(':email/extend')\n  async extendEmail(@Param('email') email: string) {\n    await this.emailService.extendEmail(email);\n    return { message: 'Email extended' };\n  }\n\n  @Delete(':email')\n  async deleteEmail(@Param('email') email: string) {\n    await this.emailService.deleteEmail(email);\n    return { message: 'Email deleted' };\n  }\n\n  @Post('webhook')\n  async handleWebhook(@Body() body: any) {\n    try {\n      if (!body || typeof body !== 'object') {\n        throw new BadRequestException('Invalid webhook payload');\n      }\n\n      // Tạm thời bỏ qua xác minh chữ ký khi test\n      //   const isTestMode = process.env.NODE_ENV === 'development'; // Chỉ áp dụng trong dev\n      //   if (!isTestMode) {\n      //     if (\n      //       !body.signature ||\n      //       !body.signature.timestamp ||\n      //       !body.signature.token ||\n      //       !body.signature.signature\n      //     ) {\n      //       throw new BadRequestException('Missing or invalid signature');\n      //     }\n\n      //     const apiKey = this.configService.get<string>('MAILGUN_API_KEY');\n      //     const { timestamp, token, signature } = body.signature;\n      //     const data = `${timestamp}${token}`;\n      //     const hmac = crypto\n      //       .createHmac('sha256', apiKey)\n      //       .update(data)\n      //       .digest('hex');\n\n      //     if (hmac !== signature) {\n      //       throw new BadRequestException('Invalid webhook signature');\n      //     }\n      //   }\n\n      // Payload từ Test Webhook có thể không đủ trường, dùng giá trị mặc định\n      const {\n        recipient = 'test123@sandbox1640064e04114303ac6dbb770cb34e1a.mailgun.org',\n        sender = 'no-reply@example.com',\n        subject = 'Test Subject',\n        'stripped-text': textContent = 'Test Content',\n        'body-html': htmlContent,\n      } = body;\n\n      await this.emailService.receiveEmail(recipient, {\n        from: sender,\n        subject,\n        content: htmlContent || textContent || '',\n        isHtml: !!htmlContent,\n      });\n\n      console.log('Email saved:', { recipient, sender, subject });\n      return { status: 'received' };\n    } catch (error) {\n      console.error('Webhook error:', error);\n      throw error;\n    }\n  }\n}\n"]}