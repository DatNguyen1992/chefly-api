{"version":3,"file":"email.service.js","sourceRoot":"","sources":["../../src/email/email.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,+CAA+C;AAC/C,uCAAiC;AACjC,4DAAiC;AACjC,yDAA+C;AAGxC,IAAM,YAAY,GAAlB,MAAM,YAAY;IAGvB,YAA6C,cAA4B;QAA5B,mBAAc,GAAd,cAAc,CAAc;QACvE,IAAI,CAAC,EAAE,GAAG,IAAA,oBAAO,EAAC;YAChB,MAAM,EAAE,oDAAoD;YAC5D,MAAM,EAAE,WAAW;SACpB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,KAAK,GAAG,GAAG,QAAQ,YAAY,CAAC;QACtC,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QAClE,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,KAAa;QAC7B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC/D,OAAO,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,KAAa,EAAE,SAAiB;QAC/C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC/D,OAAO,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,KAAa;QAC7B,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CACjC,EAAE,KAAK,EAAE,EACT,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,CACpC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,KAAa;QAC7B,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,KAAa,EACb,OAA2D;QAE3D,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CACjC,EAAE,KAAK,EAAE,EACT,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,EAAE,GAAG,OAAO,EAAE,UAAU,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAC/D,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CAAC;IACJ,CAAC;CACF,CAAA;AAjDY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;IAIE,WAAA,IAAA,sBAAW,EAAC,oBAAK,CAAC,IAAI,CAAC,CAAA;qCAAyB,gBAAK;GAHvD,YAAY,CAiDxB","sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport Mailgun from 'mailgun-js';\r\nimport { Email } from './schemas/email.schema';\r\n\r\n@Injectable()\r\nexport class EmailService {\r\n  //   private mg = mailgun({ apiKey: '943400ecf659fd87022197efa4bd1a24-17c877d7-a972715e', domain: 'diaty.com' });\r\n  private mg: Mailgun.Mailgun;\r\n  constructor(@InjectModel(Email.name) private tempEmailModel: Model<Email>) {\r\n    this.mg = Mailgun({\r\n      apiKey: '943400ecf659fd87022197efa4bd1a24-17c877d7-a972715e',\r\n      domain: 'diaty.com',\r\n    });\r\n  }\r\n\r\n  async generateEmail(): Promise<string> {\r\n    const randomId = Math.random().toString(36).substring(2, 10);\r\n    const email = `${randomId}@diaty.com`;\r\n    const newEmail = new this.tempEmailModel({ email, messages: [] });\r\n    await newEmail.save();\r\n    return email;\r\n  }\r\n\r\n  async getMessages(email: string): Promise<any[]> {\r\n    const tempEmail = await this.tempEmailModel.findOne({ email });\r\n    return tempEmail ? tempEmail.messages : [];\r\n  }\r\n\r\n  async getMessage(email: string, messageId: string): Promise<any> {\r\n    const tempEmail = await this.tempEmailModel.findOne({ email });\r\n    return tempEmail ? tempEmail.messages[parseInt(messageId)] : null;\r\n  }\r\n\r\n  async extendEmail(email: string): Promise<void> {\r\n    await this.tempEmailModel.updateOne(\r\n      { email },\r\n      { $set: { createdAt: new Date() } }, // Reset thời gian để gia hạn\r\n    );\r\n  }\r\n\r\n  async deleteEmail(email: string): Promise<void> {\r\n    await this.tempEmailModel.deleteOne({ email });\r\n  }\r\n\r\n  async receiveEmail(\r\n    email: string,\r\n    message: { from: string; subject: string; content: string },\r\n  ) {\r\n    await this.tempEmailModel.updateOne(\r\n      { email },\r\n      { $push: { messages: { ...message, receivedAt: new Date() } } },\r\n      { upsert: true }, // Tùy chọn: Tạo mới nếu email không tồn tại\r\n    );\r\n  }\r\n}\r\n"]}