{"version":3,"file":"upload.service.js","sourceRoot":"","sources":["../../src/upload/upload.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAA4C;AAC5C,2CAA8C;AAIvC,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB;QACE,eAAU,CAAC,MAAM,CAAC;YAChB,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB;YAC7C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB;YACvC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB;SAC9C,CAAC,CAAC;IACL,CAAC;IAGD,KAAK,CAAC,UAAU,CAAC,IAAyB;QACxC,OAAO,CAAC,GAAG,CAAC;YACV,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB;YAC7C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB;YACvC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB;SAC9C,CAAC,CAAC;QACH,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,eAAU,CAAC,QAAQ;iBAChB,aAAa,CACZ,EAAE,aAAa,EAAE,OAAO,EAAE,EAC1B,CAAC,KAAY,EAAE,MAAyB,EAAE,EAAE;gBAC1C,IAAI,KAAK,EAAE,CAAC;oBACV,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvB,CAAC;gBACD,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC,CACF;iBACA,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,KAAK,CAAC,YAAY,CAAC,YAAoB;QACrC,MAAM,MAAM,GAAG,MAAM,eAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,EAAE;YAC5D,aAAa,EAAE,OAAO;SACvB,CAAC,CAAC;QACH,OAAO,MAAM,CAAC,UAAU,CAAC;IAC3B,CAAC;CACF,CAAA;AAtCY,sCAAa;wBAAb,aAAa;IADzB,IAAA,mBAAU,GAAE;;GACA,aAAa,CAsCzB","sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport { UploadApiResponse } from 'cloudinary';\n\n@Injectable()\nexport class UploadService {\n  constructor() {\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  // Xử lý upload file\n  async uploadFile(file: Express.Multer.File): Promise<string> {\n    console.log({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n    return new Promise((resolve, reject) => {\n      cloudinary.uploader\n        .upload_stream(\n          { resource_type: 'image' },\n          (error: Error, result: UploadApiResponse) => {\n            if (error) {\n              return reject(error);\n            }\n            resolve(result.secure_url);\n          },\n        )\n        .end(file.buffer);\n    });\n  }\n\n  // Xử lý upload base64\n  async uploadBase64(base64String: string): Promise<string> {\n    const result = await cloudinary.uploader.upload(base64String, {\n      resource_type: 'image',\n    });\n    return result.secure_url;\n  }\n}\n"]}