{"version":3,"file":"upload.controller.js","sourceRoot":"","sources":["../../src/upload/upload.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAOwB;AACxB,+DAA2D;AAC3D,qDAAiD;AACjD,6CAA0C;AAInC,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,YAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAAG,CAAC;IAK9C,AAAN,KAAK,CAAC,WAAW,CACC,IAAyB;QAEzC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,4BAAmB,CAAC,kBAAkB,CAAC,CAAC;QACpD,CAAC;QACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtD,OAAO,EAAE,GAAG,EAAE,CAAC;IACjB,CAAC;IAIK,AAAN,KAAK,CAAC,YAAY,CAAiB,MAAc;QAC/C,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,4BAAmB,CAAC,2BAA2B,CAAC,CAAC;QAC7D,CAAC;QACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC1D,OAAO,EAAE,GAAG,EAAE,CAAC;IACjB,CAAC;CACF,CAAA;AAzBY,4CAAgB;AAMrB;IAFL,IAAA,aAAI,EAAC,OAAO,CAAC;IACb,IAAA,wBAAe,EAAC,IAAA,kCAAe,EAAC,MAAM,CAAC,CAAC;IAEtC,WAAA,IAAA,qBAAY,GAAE,CAAA;;;;mDAOhB;AAIK;IADL,IAAA,aAAI,EAAC,QAAQ,CAAC;IACK,WAAA,IAAA,aAAI,EAAC,QAAQ,CAAC,CAAA;;;;oDAMjC;2BAxBU,gBAAgB;IAF5B,IAAA,iBAAO,EAAC,QAAQ,CAAC;IACjB,IAAA,mBAAU,EAAC,QAAQ,CAAC;qCAEgB,8BAAa;GADrC,gBAAgB,CAyB5B","sourcesContent":["import {\r\n  Controller,\r\n  Post,\r\n  UploadedFile,\r\n  UseInterceptors,\r\n  Body,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { FileInterceptor } from '@nestjs/platform-express';\r\nimport { UploadService } from './upload.service';\r\nimport { ApiTags } from '@nestjs/swagger';\r\n\r\n@ApiTags('upload')\r\n@Controller('upload')\r\nexport class UploadController {\r\n  constructor(private uploadService: UploadService) {}\r\n\r\n  // API upload file\r\n  @Post('image')\r\n  @UseInterceptors(FileInterceptor('file'))\r\n  async uploadImage(\r\n    @UploadedFile() file: Express.Multer.File,\r\n  ): Promise<{ url: string }> {\r\n    if (!file) {\r\n      throw new BadRequestException('No file uploaded');\r\n    }\r\n    const url = await this.uploadService.uploadFile(file);\r\n    return { url };\r\n  }\r\n\r\n  // API upload base64\r\n  @Post('base64')\r\n  async uploadBase64(@Body('base64') base64: string): Promise<{ url: string }> {\r\n    if (!base64) {\r\n      throw new BadRequestException('No base64 string provided');\r\n    }\r\n    const url = await this.uploadService.uploadBase64(base64);\r\n    return { url };\r\n  }\r\n}\r\n"]}