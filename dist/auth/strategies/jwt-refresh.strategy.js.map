{"version":3,"file":"jwt-refresh.strategy.js","sourceRoot":"","sources":["../../../src/auth/strategies/jwt-refresh.strategy.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmE;AACnE,+CAAoD;AACpD,+CAAoD;AACpD,2CAA+C;AAC/C,+CAA+C;AAC/C,uCAAiC;AACjC,6DAAyD;AACzD,iEAAkD;AAG3C,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,IAAA,2BAAgB,EACtD,uBAAQ,EACR,aAAa,CACd;IACC,YACU,aAA4B,EACJ,SAAsB,EAC9C,YAA0B;QAElC,KAAK,CAAC;YACJ,cAAc,EAAE,yBAAU,CAAC,2BAA2B,EAAE;YACxD,gBAAgB,EAAE,KAAK;YACvB,WAAW,EAAE,aAAa,CAAC,GAAG,CAAC,yBAAyB,CAAC;YACzD,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QATK,kBAAa,GAAb,aAAa,CAAe;QACJ,cAAS,GAAT,SAAS,CAAa;QAC9C,iBAAY,GAAZ,YAAY,CAAc;IAQpC,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,GAAQ,EAAE,OAAY;QACnC,MAAM,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAE3E,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACxD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,8BAAqB,CAAC,gBAAgB,CAAC,CAAC;QACpD,CAAC;QAGD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC;QAC7C,MAAM,cAAc,GAAG,GAAG,QAAQ,OAAO,CAAC;QAG1C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAC7C,GAAG,cAAc,IAAI,IAAI,CAAC,GAAG,gBAAgB,CAC9C,CAAC;QAEF,IAAI,CAAC,WAAW,IAAI,WAAW,KAAK,YAAY,EAAE,CAAC;YACjD,MAAM,IAAI,8BAAqB,CAAC,uBAAuB,CAAC,CAAC;QAC3D,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAxCY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAOR,WAAA,IAAA,sBAAW,EAAC,kBAAI,CAAC,IAAI,CAAC,CAAA;qCADA,sBAAa;QACO,gBAAK;QAC1B,4BAAY;GAPzB,kBAAkB,CAwC9B","sourcesContent":["import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { RedisService } from '../../redis/redis.service';\nimport { User } from '@users/schemas/user.schema';\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(\n    private configService: ConfigService,\n    @InjectModel(User.name) private userModel: Model<User>,\n    private redisService: RedisService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('jwt.refreshToken.secret'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: any, payload: any) {\n    const refreshToken = req.get('Authorization').replace('Bearer', '').trim();\n\n    const user = await this.userModel.findById(payload.sub);\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    // Get provider from token payload or default to 'local'\n    const provider = payload.provider || 'local';\n    const tokenKeyPrefix = `${provider}_user`;\n\n    // Verify refresh token in Redis using the provider-specific key\n    const storedToken = await this.redisService.get(\n      `${tokenKeyPrefix}:${user._id}:refresh_token`,\n    );\n\n    if (!storedToken || storedToken !== refreshToken) {\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    return user;\n  }\n}\n"]}