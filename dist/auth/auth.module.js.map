{"version":3,"file":"auth.module.js","sourceRoot":"","sources":["../../src/auth/auth.module.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAAwC;AACxC,+CAAkD;AAClD,qCAAwC;AACxC,2CAA6D;AAC7D,+CAAkD;AAClD,4DAAwD;AACxD,kEAA8D;AAC9D,8DAAkD;AAClD,8DAAwD;AACxD,uDAAmD;AACnD,iDAA6C;AAC7C,+DAA0D;AAC1D,wDAAkD;AAClD,wDAAqD;AACrD,4EAAuE;AA6BhE,IAAM,UAAU,GAAhB,MAAM,UAAU;CAAG,CAAA;AAAb,gCAAU;qBAAV,UAAU;IA3BtB,IAAA,eAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAc;YACd,eAAS,CAAC,aAAa,CAAC;gBACtB,OAAO,EAAE,CAAC,qBAAY,CAAC;gBACvB,UAAU,EAAE,KAAK,EAAE,aAA4B,EAAE,EAAE,CAAC,CAAC;oBACnD,MAAM,EAAE,aAAa,CAAC,GAAG,CAAC,wBAAwB,CAAC;oBACnD,WAAW,EAAE;wBACX,SAAS,EAAE,aAAa,CAAC,GAAG,CAAC,2BAA2B,CAAC;qBAC1D;iBACF,CAAC;gBACF,MAAM,EAAE,CAAC,sBAAa,CAAC;aACxB,CAAC;YACF,0BAAW;YACX,0BAAW;YACX,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,kBAAI,CAAC,IAAI,EAAE,MAAM,EAAE,wBAAU,EAAE,CAAC,CAAC;SACrE;QACD,WAAW,EAAE,CAAC,gCAAc,CAAC;QAC7B,SAAS,EAAE;YACT,0BAAW;YACX,uCAAiB;YACjB,0BAAW;YACX,yCAAkB;YAClB,gCAAc;SACf;QACD,OAAO,EAAE,CAAC,0BAAW,EAAE,uCAAiB,CAAC;KAC1C,CAAC;GACW,UAAU,CAAG","sourcesContent":["import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { User } from '@users/schemas/user.schema';\nimport { UserSchema } from '@users/schemas/user.schema';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { SocialAuthService } from './social-auth.service';\nimport { UsersModule } from '@users/users.module';\nimport { RedisModule } from 'src/redis/redis.module';\nimport { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';\n\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('jwt.accessToken.secret'),\n        signOptions: {\n          expiresIn: configService.get('jwt.accessToken.expiresIn'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    RedisModule,\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    SocialAuthService,\n    JwtStrategy,\n    JwtRefreshStrategy,\n    GoogleStrategy,\n  ],\n  exports: [AuthService, SocialAuthService],\n})\nexport class AuthModule {}\n"]}