{"version":3,"file":"social-auth.service.js","sourceRoot":"","sources":["../../src/auth/social-auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { OAuth2Client } from 'google-auth-library';\nimport { AuthService } from './auth.service';\nimport { User } from '@users/schemas/user.schema';\nimport { SocialProvider } from './dto/social-auth.dto';\nimport { UsersService } from '@users/users.service';\nimport { AdminAuthDto } from './dto/admin-auth.dto';\nimport { LoginDto } from './dto/login.dto';\n\n@Injectable()\nexport class SocialAuthService {\n  private googleClient: OAuth2Client;\n\n  constructor(\n    @InjectModel(User.name) private userModel: Model<User>,\n    private userService: UsersService,\n    private configService: ConfigService,\n    private authService: AuthService,\n  ) {\n    this.googleClient = new OAuth2Client(\n      this.configService.get('oauth.google.clientID'),\n    );\n  }\n\n  async validateSocialLogin(provider: SocialProvider, token: string) {\n    let socialUser;\n\n    switch (provider) {\n      case SocialProvider.GOOGLE:\n        socialUser = await this.verifyGoogleToken(token);\n        break;\n      default:\n        throw new UnauthorizedException('Invalid provider');\n    }\n    if (!socialUser) {\n      throw new UnauthorizedException('Invalid token');\n    }\n    // Find existing user or create new one\n    let user: User = await this.userModel.findOne({\n      providerId: socialUser.id || socialUser.sub,\n      provider,\n    });\n    if (!user) {\n      user = await this.userService.create({\n        email: socialUser.email ?? '',\n        name: socialUser.name || 'Apple User',\n        provider,\n        providerId: socialUser.id || socialUser.sub,\n      });\n    }\n    // Generate JWT tokens\n    return this.authService.generateTokens(user);\n  }\n\n  async validateAdminLogin(adminAuthDto: AdminAuthDto) {\n    // Find existing user or create new one\n    const user: User = await this.userModel.findOne({\n      email: adminAuthDto.email,\n      password: adminAuthDto.password,\n    });\n    if (!user) {\n      throw new UnauthorizedException('Invalid email or password');\n    }\n    // Generate JWT tokens\n    return this.authService.generateTokens(user);\n  }\n\n  async validateLogin(loginDto: LoginDto) {\n    // Find existing user or create new one\n    const user: User = await this.userModel.findOne({\n      token: loginDto.token,\n    });\n    let JWTtoken;\n    if (!user) {\n      // throw new UnauthorizedException('Invalid email or password');\n      const newUser = await this.userModel.create({\n        name: 'New user',\n        token: loginDto.token,\n        email: '',\n        password: '',\n        avatar: '',\n      });\n      JWTtoken = await this.authService.generateTokens(newUser);\n    } else {\n      JWTtoken = await this.authService.generateTokens(user);\n    }\n    // Generate JWT tokens\n    return JWTtoken;\n  }\n\n  private async verifyGoogleToken(token: string) {\n    try {\n      const ticket = await this.googleClient.verifyIdToken({\n        idToken: token,\n      });\n      const payload = ticket.getPayload();\n      return {\n        id: payload.sub,\n        email: payload.email,\n        name: payload.name,\n      };\n    } catch (error) {\n      console.log(error);\n      throw new UnauthorizedException('Invalid Google token');\n    }\n  }\n}\n"]}