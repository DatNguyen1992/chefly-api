{"version":3,"file":"history.service.js","sourceRoot":"","sources":["../../src/history/history.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,4EAAsE;AACtE,6DAAmD;AACnD,uCAA+C;AAC/C,+CAA+C;AAC/C,wEAA+E;AAE/E,mDAA6C;AAItC,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,gCAAuB;IACzD,YAA+C,YAA4B;QACzE,KAAK,CAAC,YAAY,CAAC,CAAC;QADyB,iBAAY,GAAZ,YAAY,CAAgB;IAE3E,CAAC;IAED,KAAK,CAAC,eAAe,CACnB,IAAY,EACZ,KAAsB;QAEtB,MAAM,UAAU,GAAG,IAAI,2BAAU,EAAW,CAAC;QAC7C,IAAI,KAAK,EAAE,KAAK,EAAE,CAAC;YACjB,UAAU,CAAC,KAAK,GAAG,KAAK,EAAE,KAAK,CAAC;QAClC,CAAC;QACD,IAAI,KAAK,EAAE,IAAI,EAAE,CAAC;YAChB,UAAU,CAAC,IAAI,GAAG,KAAK,EAAE,IAAI,CAAC;QAChC,CAAC;QAED,UAAU,CAAC,SAAS,GAAG;YACrB,IAAI;YACJ,GAAG,CAAC,KAAK,EAAE,IAAI,IAAI;gBACjB,IAAI,EAAE,KAAK,EAAE,IAAI;aAClB,CAAC;YACF,GAAG,CAAC,KAAK,EAAE,MAAM,IAAI;gBACnB,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE;aAC/C,CAAC;SACH,CAAC;QAEF,IAAI,KAAK,EAAE,IAAI,EAAE,CAAC;YAChB,UAAU,CAAC,IAAI,GAAG;gBAChB,SAAS,EAAE,KAAK,EAAE,IAAI,KAAK,oBAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM;aACzD,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,IAAY,EACZ,gBAAkC;QAElC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;YAC7C,IAAI;YACJ,GAAG,gBAAgB;SACpB,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,IAAY;QACnC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;YAChD,GAAG,EAAE,EAAE;YACP,IAAI;SACL,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,IAAY;QAC1B,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;YACjC,IAAI;SACL,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAjEY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAEE,WAAA,IAAA,sBAAW,EAAC,wBAAO,CAAC,IAAI,CAAC,CAAA;qCAAuB,gBAAK;GADvD,cAAc,CAiE1B","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { BaseRepository } from '@shared/repositories/base.repository';\r\nimport { History } from './schemas/history.schema';\r\nimport { DeleteResult, Model } from 'mongoose';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { DataFilter, PaginationData } from '@shared/interfaces/data.interface';\r\nimport { QueryHistoryDto } from './dto/query-history.dto';\r\nimport { SortType } from '@common/constants';\r\nimport { CreateHistoryDto } from './dto/create-history.dto';\r\n\r\n@Injectable()\r\nexport class HistoryService extends BaseRepository<History> {\r\n  constructor(@InjectModel(History.name) private historyModel: Model<History>) {\r\n    super(historyModel);\r\n  }\r\n\r\n  async findHistoryPage(\r\n    user: string,\r\n    query: QueryHistoryDto,\r\n  ): Promise<PaginationData<History>> {\r\n    const dataFilter = new DataFilter<History>();\r\n    if (query?.limit) {\r\n      dataFilter.limit = query?.limit;\r\n    }\r\n    if (query?.page) {\r\n      dataFilter.page = query?.page;\r\n    }\r\n\r\n    dataFilter.condition = {\r\n      user,\r\n      ...(query?.type && {\r\n        type: query?.type,\r\n      }),\r\n      ...(query?.search && {\r\n        name: { $regex: query?.search, $options: 'i' },\r\n      }),\r\n    };\r\n\r\n    if (query?.sort) {\r\n      dataFilter.sort = {\r\n        createdAt: query?.sort === SortType.ASC ? 'asc' : 'desc',\r\n      };\r\n    }\r\n\r\n    return this.findPage(dataFilter);\r\n  }\r\n\r\n  async createHistory(\r\n    user: string,\r\n    createHistoryDto: CreateHistoryDto,\r\n  ): Promise<History> {\r\n    const history = await this.historyModel.create({\r\n      user,\r\n      ...createHistoryDto,\r\n    });\r\n\r\n    if (!history) {\r\n      throw new NotFoundException('History not found');\r\n    }\r\n    return history;\r\n  }\r\n\r\n  async remove(id: string, user: string): Promise<DeleteResult> {\r\n    const history = await this.historyModel.deleteOne({\r\n      _id: id,\r\n      user,\r\n    });\r\n\r\n    return history;\r\n  }\r\n\r\n  async removeAll(user: string): Promise<void> {\r\n    await this.historyModel.deleteMany({\r\n      user,\r\n    });\r\n  }\r\n}\r\n"]}