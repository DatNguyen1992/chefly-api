{"version":3,"file":"base.repository.js","sourceRoot":"","sources":["../../../src/shared/repositories/base.repository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Model,\n  Document,\n  FilterQuery,\n  QueryOptions,\n  UpdateQuery,\n} from 'mongoose';\nimport type { BulkWriteResult } from 'mongodb';\nimport { PaginationData } from '../interfaces/data.interface';\nimport { DataFilter } from '../interfaces/data.interface';\n\nexport abstract class BaseRepository<T> {\n  private _model: Model<Document>;\n  private LIMIT_DEFAULT = 25;\n\n  constructor(schemaModel) {\n    this._model = schemaModel;\n  }\n\n  async create(data: Partial<T>): Promise<T> {\n    const entity = new this._model(data);\n    return (await entity.save()) as T;\n  }\n\n  async insert(createDto: Partial<T>): Promise<T> {\n    const createdEntity = new this._model(createDto);\n    return (await createdEntity.save()).toJSON() as T;\n  }\n\n  async updateMany(condition: Partial<T>, updateDto: Partial<T>) {\n    return await this._model.updateMany(condition, updateDto, { new: true });\n  }\n\n  async saveAll(entities: Document[]): Promise<BulkWriteResult> {\n    return await this._model.bulkSave(entities);\n  }\n\n  async update(id: string, updateDto: any): Promise<T> {\n    return await this._model.findByIdAndUpdate(id, updateDto, { new: true });\n  }\n\n  async updateOne(\n    filter: FilterQuery<T>,\n    update: UpdateQuery<T>,\n    options: QueryOptions = { new: true },\n  ): Promise<T> {\n    return this._model.findOneAndUpdate(filter, update, options);\n  }\n\n  async updateById(\n    id: string,\n    update: UpdateQuery<T>,\n    options: QueryOptions = { new: true },\n  ): Promise<T> {\n    return this._model.findByIdAndUpdate(id, update, options);\n  }\n\n  async findById(id: string): Promise<T> {\n    return await this._model.findById(id);\n  }\n\n  async findOne(condition: Partial<T>): Promise<T> {\n    return await this._model.findOne(condition);\n  }\n\n  async findAll(): Promise<T[]> {\n    return await this._model.find();\n  }\n\n  async findBy(condition: Partial<T>): Promise<T[]> {\n    return await this._model.find(condition);\n  }\n\n  async find(where: FilterQuery<T>): Promise<T[]> {\n    return await this._model.find(where);\n  }\n\n  async delete(id: string): Promise<T> {\n    return await this._model.findByIdAndDelete(id);\n  }\n\n  async softDelete(id: string): Promise<T> {\n    return await this._model.findByIdAndDelete(id, { new: true });\n  }\n\n  async findPage(filter: DataFilter<T>): Promise<PaginationData<T>> {\n    try {\n      // eslint-disable-next-line prefer-const\n      let { condition, page, limit, selectCols, population, sort } = filter;\n      if (!sort || !Object.keys(sort).length) {\n        sort = {\n          // _id: -1,\n          createdAt: -1,\n        };\n      }\n      if (!limit) {\n        limit = this.LIMIT_DEFAULT;\n      }\n      if (!page) {\n        page = 1;\n      }\n      limit = limit != 0 ? limit : limit;\n      const skip = page != 0 && page != 1 ? (page - 1) * limit : page - 1;\n      const totalCount = await this._model.countDocuments(condition);\n      const totalPage = Math.ceil(totalCount / limit);\n      const query = this._model.find(condition);\n      if (selectCols && selectCols.length) {\n        query.select(selectCols);\n      }\n      if (population && population.length) {\n        query.populate(population);\n      }\n      const documents = await query.sort(sort).skip(skip).limit(limit).exec();\n      return this.createTableObject(\n        page,\n        limit,\n        documents as T[],\n        totalCount,\n        totalPage,\n      );\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getByAggregate(aggregate: any[]) {\n    let documents = [];\n    if (aggregate && aggregate.length) {\n      documents = await this._model.aggregate(aggregate).exec();\n    }\n    return documents;\n  }\n\n  createTableObject(\n    page: number,\n    limit: number,\n    documents: T[],\n    totalCount: number,\n    totalPage: number,\n  ): PaginationData<T> {\n    const objectListData: PaginationData<T> = {\n      page: page,\n      limit,\n      totalCount: totalCount,\n      totalInList: documents.length,\n      data: documents,\n      totalPage,\n    };\n    return objectListData;\n  }\n}\n"]}