{"version":3,"file":"redis.service.js","sourceRoot":"","sources":["../../src/redis/redis.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Injectable,\n  OnModuleInit,\n  OnModuleDestroy,\n  Logger,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\n\n@Injectable()\nexport class RedisService implements OnModuleInit, OnModuleDestroy {\n  private redisClient: Redis;\n  private readonly keyPrefix = 'app:';\n  private readonly logger = new Logger(RedisService.name);\n\n  constructor(private configService: ConfigService) {}\n\n  async onModuleInit() {\n    const redisConfig = {\n      host: 'eminent-moose-52503.upstash.io',\n      port: 6379,\n      password:\n        this.configService.get('redis.password') || 'your-password-here', // Replace with actual password or use environment variable\n      tls: {},\n      maxRetriesPerRequest:\n        this.configService.get('redis.maxRetriesPerRequest') || 3,\n      retryStrategy: (times: number) => {\n        // Retry strategy: wait 1 second, up to 3 attempts\n        return Math.min(times * 1000, 3000);\n      },\n      reconnectOnError: (err: Error) => {\n        const targetErrors = ['READONLY', 'ETIMEDOUT'];\n        return targetErrors.some((targetError) =>\n          err.message.includes(targetError),\n        );\n      },\n      keyPrefix: this.keyPrefix,\n      showFriendlyErrorStack: process.env.NODE_ENV !== 'production',\n      enableReadyCheck: true,\n      autoResubscribe: true,\n      autoResendUnfulfilledCommands: true,\n      maxLoadingRetryTime: 5000,\n      commandTimeout: 5000,\n    };\n\n    this.redisClient = new Redis(redisConfig);\n\n    this.redisClient.on('error', (error) => {\n      this.logger.error('Redis connection error:', error);\n    });\n\n    this.redisClient.on('connect', () => {\n      this.logger.log('Successfully connected to Redis');\n    });\n\n    this.redisClient.on('ready', () => {\n      this.logger.log('Redis client is ready');\n    });\n\n    this.redisClient.on('close', () => {\n      this.logger.warn('Redis connection closed');\n    });\n\n    this.redisClient.on('reconnecting', () => {\n      this.logger.log('Reconnecting to Redis');\n    });\n  }\n\n  async onModuleDestroy() {\n    if (this.redisClient) {\n      await this.redisClient.quit();\n      this.logger.log('Redis connection closed');\n    }\n  }\n\n  async set(key: string, value: string, expiresIn?: number): Promise<void> {\n    try {\n      if (expiresIn) {\n        await this.redisClient.set(key, value, 'EX', expiresIn);\n      } else {\n        await this.redisClient.set(key, value);\n      }\n    } catch (error) {\n      this.logger.error(`Error setting key ${key}:`, error);\n      throw error;\n    }\n  }\n\n  async get(key: string): Promise<string | null> {\n    try {\n      return await this.redisClient.get(key);\n    } catch (error) {\n      this.logger.error(`Error getting key ${key}:`, error);\n      throw error;\n    }\n  }\n\n  async del(key: string): Promise<void> {\n    try {\n      await this.redisClient.del(key);\n    } catch (error) {\n      this.logger.error(`Error deleting key ${key}:`, error);\n      throw error;\n    }\n  }\n\n  async exists(key: string): Promise<boolean> {\n    try {\n      const result = await this.redisClient.exists(key);\n      return result === 1;\n    } catch (error) {\n      this.logger.error(`Error checking existence of key ${key}:`, error);\n      throw error;\n    }\n  }\n\n  async setWithHash(\n    key: string,\n    hash: Record<string, any>,\n    expiresIn?: number,\n  ): Promise<void> {\n    try {\n      const pipeline = this.redisClient.pipeline();\n      pipeline.hmset(key, hash);\n      if (expiresIn) {\n        pipeline.expire(key, expiresIn);\n      }\n      await pipeline.exec();\n    } catch (error) {\n      this.logger.error(`Error setting hash for key ${key}:`, error);\n      throw error;\n    }\n  }\n\n  async getFromHash(key: string, field: string): Promise<string | null> {\n    try {\n      return await this.redisClient.hget(key, field);\n    } catch (error) {\n      this.logger.error(\n        `Error getting hash field ${field} for key ${key}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async deleteFromHash(key: string, field: string): Promise<void> {\n    try {\n      await this.redisClient.hdel(key, field);\n    } catch (error) {\n      this.logger.error(\n        `Error deleting hash field ${field} for key ${key}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  // Add a method to get the Redis client for advanced usage if needed\n  getClient(): Redis {\n    return this.redisClient;\n  }\n}\n"]}