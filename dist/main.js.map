{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";;;;;AAAA,uCAA2C;AAC3C,6CAAyC;AACzC,6CAAiE;AACjE,oDAA4B;AAC5B,2CAAgD;AAChD,kFAA4E;AAC5E,uFAAkF;AAElF,MAAM,YAAY,GAAG,gBAAM,CAAC,MAAM,EAAE,CAAC;AACrC,IAAI,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;AAChE,CAAC;KAAM,CAAC;IACN,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;AAC3D,CAAC;AACD,IAAI,SAAS,GAAG,IAAI,CAAC;AACrB,KAAK,UAAU,SAAS;IACtB,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,MAAM,eAAe,GAAG;YACtB,aAAa;YACb,aAAa;YACb,YAAY;YACZ,YAAY;YACZ,gBAAgB;YAChB,uBAAuB;YACvB,oBAAoB;YACpB,uBAAuB;SACxB,CAAC;QACF,MAAM,cAAc,GAAG,eAAe,CAAC,MAAM,CAC3C,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CACjC,CAAC;QACF,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CACb,kCAAkC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAC9D,CAAC;QACJ,CAAC;QACD,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;QAChD,GAAG,CAAC,UAAU,CAAC;YACb,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,wCAAwC;YACjD,cAAc,EAAE,qCAAqC;SACtD,CAAC,CAAC;QACH,GAAG,CAAC,cAAc,CAAC,IAAI,uBAAc,EAAE,CAAC,CAAC;QAGzC,GAAG,CAAC,gBAAgB,CAAC,IAAI,2CAAmB,EAAE,CAAC,CAAC;QAGhD,GAAG,CAAC,qBAAqB,CAAC,IAAI,4CAAoB,EAAE,CAAC,CAAC;QAGtD,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,IAAI,yBAAe,EAAE;aACjC,QAAQ,CAAC,YAAY,CAAC;aACtB,cAAc,CAAC,wCAAwC,CAAC;aACxD,UAAU,CAAC,KAAK,CAAC;aACjB,aAAa,EAAE;aACf,KAAK,EAAE,CAAC;QACX,MAAM,QAAQ,GAAG,uBAAa,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC3D,uBAAa,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC1C,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QACjB,SAAS,GAAG,GAAG,CAAC,cAAc,EAAE,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AACD,kBAAe,KAAK,EAAE,GAAQ,EAAE,GAAQ,EAAE,EAAE;IAC1C,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,SAAS,EAAE,CAAC;QAC9B,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACvB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACtE,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport dotenv from 'dotenv';\nimport { ValidationPipe } from '@nestjs/common';\nimport { HttpExceptionFilter } from '@common/filters/http-exception.filter';\nimport { TransformInterceptor } from '@common/interceptors/transform.interceptor';\n\nconst dotenvResult = dotenv.config();\nif (dotenvResult.error) {\n  console.error('Error loading .env file:', dotenvResult.error);\n} else {\n  console.log('Environment variables loaded successfully');\n}\nlet cachedApp = null;\nasync function bootstrap() {\n  if (!cachedApp) {\n    const requiredEnvVars = [\n      'DB_USERNAME',\n      'DB_PASSWORD',\n      'REDIS_HOST',\n      'REDIS_PORT',\n      'REDIS_PASSWORD',\n      'CLOUDINARY_CLOUD_NAME',\n      'CLOUDINARY_API_KEY',\n      'CLOUDINARY_API_SECRET',\n    ];\n    const missingEnvVars = requiredEnvVars.filter(\n      (envVar) => !process.env[envVar],\n    );\n    if (missingEnvVars.length > 0) {\n      throw new Error(\n        `Missing environment variables: ${missingEnvVars.join(', ')}`,\n      );\n    }\n    const app = await NestFactory.create(AppModule);\n    app.enableCors({\n      origin: '*',\n      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\n      allowedHeaders: 'Content-Type, Accept, Authorization',\n    });\n    app.useGlobalPipes(new ValidationPipe());\n\n    // Global filters\n    app.useGlobalFilters(new HttpExceptionFilter());\n\n    // Global interceptors\n    app.useGlobalInterceptors(new TransformInterceptor());\n\n    // Global prefix\n    app.setGlobalPrefix('api');\n    const config = new DocumentBuilder()\n      .setTitle('CHEFLY API')\n      .setDescription('Authentication and User Management API')\n      .setVersion('1.0')\n      .addBearerAuth()\n      .build();\n    const document = SwaggerModule.createDocument(app, config);\n    SwaggerModule.setup('api', app, document);\n    await app.init();\n    cachedApp = app.getHttpAdapter().getInstance();\n  }\n  return cachedApp;\n}\nexport default async (req: any, res: any) => {\n  try {\n    const app = await bootstrap();\n    return app(req, res);\n  } catch (error) {\n    console.error('Error in serverless handler:', error);\n    res\n      .status(500)\n      .json({ message: 'Internal Server Error', error: error.message });\n  }\n};\n\n// async function bootstrap() {\n//   const app = await NestFactory.create(AppModule);\n//    // Global pipes\n//    app.useGlobalPipes(new ValidationPipe());\n\n//    // Global filters\n//    app.useGlobalFilters(new HttpExceptionFilter());\n\n//    // Global interceptors\n//    app.useGlobalInterceptors(new TransformInterceptor());\n\n//    // Global prefix\n//    app.setGlobalPrefix('api');\n\n//   app.enableCors({\n//     origin: '*',\n//     methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\n//     allowedHeaders: 'Content-Type, Accept, Authorization',\n//   });\n//   // Swagger setup\n//   const config = new DocumentBuilder()\n//     .setTitle('CHEFLY API')\n//     .setDescription('Authentication and User Management API')\n//     .setVersion('1.0')\n//     .addBearerAuth()\n//     .build();\n//   const document = SwaggerModule.createDocument(app, config);\n//   SwaggerModule.setup('api', app, document);\n//   await app.listen(3000);\n// }\n// bootstrap();\n"]}