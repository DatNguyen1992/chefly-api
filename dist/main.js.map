{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";;;;;AAAA,uCAA2C;AAC3C,6CAAyC;AACzC,6CAAiE;AACjE,oDAA4B;AAC5B,2CAAgD;AAChD,kFAA4E;AAC5E,uFAAkF;AAElF,MAAM,YAAY,GAAG,gBAAM,CAAC,MAAM,EAAE,CAAC;AAwDrC,KAAK,UAAU,SAAS;IACtB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;IAE/C,GAAG,CAAC,cAAc,CAAC,IAAI,uBAAc,EAAE,CAAC,CAAC;IAGzC,GAAG,CAAC,gBAAgB,CAAC,IAAI,2CAAmB,EAAE,CAAC,CAAC;IAGhD,GAAG,CAAC,qBAAqB,CAAC,IAAI,4CAAoB,EAAE,CAAC,CAAC;IAGtD,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAE5B,GAAG,CAAC,UAAU,CAAC;QACb,MAAM,EAAE,GAAG;QACX,OAAO,EAAE,wCAAwC;QACjD,cAAc,EAAE,qCAAqC;KACtD,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,IAAI,yBAAe,EAAE;SACjC,QAAQ,CAAC,YAAY,CAAC;SACtB,cAAc,CAAC,wCAAwC,CAAC;SACxD,UAAU,CAAC,KAAK,CAAC;SACjB,aAAa,EAAE;SACf,KAAK,EAAE,CAAC;IACX,MAAM,QAAQ,GAAG,uBAAa,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAC3D,uBAAa,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC1C,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACzB,CAAC;AACD,SAAS,EAAE,CAAC","sourcesContent":["import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport dotenv from 'dotenv';\nimport { ValidationPipe } from '@nestjs/common';\nimport { HttpExceptionFilter } from '@common/filters/http-exception.filter';\nimport { TransformInterceptor } from '@common/interceptors/transform.interceptor';\n\nconst dotenvResult = dotenv.config();\n// if (dotenvResult.error) {\n//   console.error('Error loading .env file:', dotenvResult.error);\n// } else {\n//   console.log('Environment variables loaded successfully');\n// }\n// let cachedApp = null;\n// async function bootstrap() {\n//   if (!cachedApp) {\n//     const requiredEnvVars = [\n//       'DB_USERNAME',\n//       'DB_PASSWORD',\n//       'REDIS_HOST',\n//       'REDIS_PORT',\n//       'REDIS_PASSWORD',\n//     ];\n//     const missingEnvVars = requiredEnvVars.filter(\n//       (envVar) => !process.env[envVar],\n//     );\n//     if (missingEnvVars.length > 0) {\n//       throw new Error(\n//         `Missing environment variables: ${missingEnvVars.join(', ')}`,\n//       );\n//     }\n//     const app = await NestFactory.create(AppModule);\n//     app.enableCors({\n//       origin: '*',\n//       methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\n//       allowedHeaders: 'Content-Type, Accept, Authorization',\n//     });\n//     app.setGlobalPrefix('api');\n//     const config = new DocumentBuilder()\n//       .setTitle('CHEFLY API')\n//       .setDescription('Authentication and User Management API')\n//       .setVersion('1.0')\n//       .addBearerAuth()\n//       .build();\n//     const document = SwaggerModule.createDocument(app, config);\n//     SwaggerModule.setup('api', app, document);\n//     await app.init();\n//     cachedApp = app.getHttpAdapter().getInstance();\n//   }\n//   return cachedApp;\n// }\n// export default async (req: any, res: any) => {\n//   try {\n//     const app = await bootstrap();\n//     return app(req, res);\n//   } catch (error) {\n//     console.error('Error in serverless handler:', error);\n//     res\n//       .status(500)\n//       .json({ message: 'Internal Server Error', error: error.message });\n//   }\n// };\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n   // Global pipes\n   app.useGlobalPipes(new ValidationPipe());\n\n   // Global filters\n   app.useGlobalFilters(new HttpExceptionFilter());\n \n   // Global interceptors\n   app.useGlobalInterceptors(new TransformInterceptor());\n \n   // Global prefix\n   app.setGlobalPrefix('api');\n   \n  app.enableCors({\n    origin: '*',\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\n    allowedHeaders: 'Content-Type, Accept, Authorization',\n  });\n  // Swagger setup\n  const config = new DocumentBuilder()\n    .setTitle('CHEFLY API')\n    .setDescription('Authentication and User Management API')\n    .setVersion('1.0')\n    .addBearerAuth()\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n  await app.listen(3000);\n}\nbootstrap();\n"]}