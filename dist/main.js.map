{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";;;;;AAAA,uCAA2C;AAC3C,6CAAyC;AACzC,6CAAiE;AACjE,oDAA4B;AAG5B,MAAM,YAAY,GAAG,gBAAM,CAAC,MAAM,EAAE,CAAC;AACrC,IAAI,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;AAChE,CAAC;KAAM,CAAC;IACN,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;AAC3D,CAAC;AAGD,IAAI,SAAS,GAAG,IAAI,CAAC;AA0ErB,KAAK,UAAU,SAAS;IACtB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;IAEhD,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC3B,GAAG,CAAC,UAAU,CAAC;QACb,MAAM,EAAE,GAAG;QACX,OAAO,EAAE,wCAAwC;QACjD,cAAc,EAAE,qCAAqC;KACtD,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,IAAI,yBAAe,EAAE;SACjC,QAAQ,CAAC,YAAY,CAAC;SACtB,cAAc,CAAC,wCAAwC,CAAC;SACxD,UAAU,CAAC,KAAK,CAAC;SACjB,aAAa,EAAE;SACf,KAAK,EAAE,CAAC;IACX,MAAM,QAAQ,GAAG,uBAAa,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAC3D,uBAAa,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC1C,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACzB,CAAC;AACD,SAAS,EAAE,CAAC","sourcesContent":["import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module'; // Ensure this path is correct\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport dotenv from 'dotenv';\n\n// Load environment variables\nconst dotenvResult = dotenv.config();\nif (dotenvResult.error) {\n  console.error('Error loading .env file:', dotenvResult.error);\n} else {\n  console.log('Environment variables loaded successfully');\n}\n\n// Cache the app instance for serverless environments\nlet cachedApp = null;\n\n// async function bootstrap() {\n//   if (!cachedApp) {\n//     // Validate critical environment variables\n//     const requiredEnvVars = [\n//       'DB_USERNAME',\n//       'DB_PASSWORD',\n//       'REDIS_HOST',\n//       'REDIS_PORT',\n//       'REDIS_PASSWORD',\n//     ];\n//     const missingEnvVars = requiredEnvVars.filter(\n//       (envVar) => !process.env[envVar],\n//     );\n//     if (missingEnvVars.length > 0) {\n//       throw new Error(\n//         `Missing environment variables: ${missingEnvVars.join(', ')}`,\n//       );\n//     }\n\n//     // Create the NestJS app\n//     const app = await NestFactory.create(AppModule);\n\n//     // Enable CORS for serverless compatibility\n//     app.enableCors({\n//       origin: '*',\n//       methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\n//       allowedHeaders: 'Content-Type, Accept, Authorization',\n//     });\n\n//     // Set global API prefix\n//     // app.setGlobalPrefix('api');\n//     app.setGlobalPrefix('api');\n\n//     // Swagger setup for API documentation\n//     const config = new DocumentBuilder()\n//       .setTitle('CHEFLY API')\n//       .setDescription('Authentication and User Management API')\n//       .setVersion('1.0')\n//       .addBearerAuth()\n//       .build();\n//     const document = SwaggerModule.createDocument(app, config);\n//     SwaggerModule.setup('api', app, document);\n\n//     // Initialize the app for serverless\n//     await app.init();\n\n//     // Get the underlying HTTP adapter (Express or Fastify) for serverless\n//     cachedApp = app.getHttpAdapter().getInstance();\n//   }\n//   return cachedApp;\n// }\n\n// // Serverless handler\n// export default async (req: any, res: any) => {\n//   try {\n//     const app = await bootstrap();\n//     return app(req, res);\n//   } catch (error) {\n//     console.error('Error in serverless handler:', error);\n//     res\n//       .status(500)\n//       .json({ message: 'Internal Server Error', error: error.message });\n//   }\n// };\n\n// const dotenvResult = dotenv.config();\n// if (dotenvResult.error) {\n//   console.error('Error loading .env file:', dotenvResult.error);\n// } else {\n//   console.log('Environment variables loaded successfully');\n// }\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  // Global prefix\n  app.setGlobalPrefix('api');\n  app.enableCors({\n    origin: '*',\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\n    allowedHeaders: 'Content-Type, Accept, Authorization',\n  });\n  // Swagger setup\n  const config = new DocumentBuilder()\n    .setTitle('CHEFLY API')\n    .setDescription('Authentication and User Management API')\n    .setVersion('1.0')\n    .addBearerAuth()\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n  await app.listen(3000);\n}\nbootstrap();\n"]}