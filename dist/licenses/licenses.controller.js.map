{"version":3,"file":"licenses.controller.js","sourceRoot":"","sources":["../../src/licenses/licenses.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAMwB;AACxB,yDAAoD;AACpD,6CAA2C;AAC3C,iEAAwD;AAGjD,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC1B,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAI,CAAC;IAe1D,AAAN,KAAK,CAAC,oBAAoB,CAAwB,YAAoB,EAAiB,IAAiB;QACpG,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,MAAM,IAAI,sBAAa,CACnB,2BAA2B,EAC3B,mBAAU,CAAC,WAAW,CACzB,CAAC;QACN,CAAC;QACD,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,+BAAW,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACtD,MAAM,IAAI,sBAAa,CACnB,+CAA+C,EAC/C,mBAAU,CAAC,WAAW,CACzB,CAAC;QACN,CAAC;QAED,IAAI,CAAC;YACD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC/E,IAAI,UAAU,EAAE,CAAC;gBACb,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC;YACxC,CAAC;iBAAM,CAAC;gBACJ,MAAM,IAAI,sBAAa,CAAC,qBAAqB,EAAE,mBAAU,CAAC,SAAS,CAAC,CAAC;YACzE,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,MAAM,IAAI,sBAAa,CAAC,KAAK,CAAC,OAAO,EAAE,mBAAU,CAAC,qBAAqB,CAAC,CAAC;QAC7E,CAAC;IACL,CAAC;CACJ,CAAA;AAzCY,8CAAiB;AAgBpB;IAbL,IAAA,YAAG,GAAE;IACL,IAAA,kBAAQ,EAAC;QACN,IAAI,EAAE,cAAc;QACpB,IAAI,EAAE,MAAM;QACZ,WAAW,EAAE,sBAAsB;QACnC,QAAQ,EAAE,IAAI;KACjB,CAAC;IACD,IAAA,kBAAQ,EAAC;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,+BAAW;QACjB,WAAW,EAAE,2CAA2C;QACxD,QAAQ,EAAE,IAAI;KACjB,CAAC;IAC0B,WAAA,IAAA,cAAK,EAAC,cAAc,CAAC,CAAA;IAAwB,WAAA,IAAA,cAAK,EAAC,MAAM,CAAC,CAAA;;;;6DAwBrF;4BAxCQ,iBAAiB;IAD7B,IAAA,mBAAU,EAAC,UAAU,CAAC;qCAE0B,iCAAc;GADlD,iBAAiB,CAyC7B","sourcesContent":["import {\n    Controller,\n    Get,\n    Query,\n    HttpStatus,\n    HttpException,\n} from '@nestjs/common';\nimport { LicenseService } from './licenses.service';\nimport { ApiQuery } from '@nestjs/swagger';\nimport { VehicleType } from './enums/vehicle-type.enum';\n\n@Controller('licenses')\nexport class LicenseController {\n    constructor(private readonly licenseService: LicenseService) { }\n\n    @Get()\n    @ApiQuery({\n        name: 'licensePlate',\n        type: String,\n        description: 'License plate number',\n        required: true,\n    })\n    @ApiQuery({\n        name: 'type',\n        enum: VehicleType,\n        description: 'Vehicle type (1 for Xe Hoi, 2 for Xe May)',\n        required: true,\n    })\n    async getLicenseViolations(@Query('licensePlate') licensePlate: string, @Query('type') type: VehicleType,) {\n        if (!licensePlate) {\n            throw new HttpException(\n                'License plate is required',\n                HttpStatus.BAD_REQUEST,\n            );\n        }\n        if (!type || !Object.values(VehicleType).includes(type)) {\n            throw new HttpException(\n                'Vehicle type must be 1 (Xe Hoi) or 2 (Xe May)',\n                HttpStatus.BAD_REQUEST,\n            );\n        }\n\n        try {\n            const violations = await this.licenseService.getViolations(licensePlate, type);\n            if (violations) {\n                return { licensePlate, violations };\n            } else {\n                throw new HttpException('No violations found', HttpStatus.NOT_FOUND);\n            }\n        } catch (error) {\n            throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n}\n"]}