{"version":3,"file":"api-caller.service.js","sourceRoot":"","sources":["../../src/licenses/api-caller.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, HttpException, HttpStatus, Logger } from '@nestjs/common';\nimport axios, { AxiosInstance } from 'axios';\nimport * as Tesseract from 'tesseract.js';\nimport * as qs from 'qs';\nimport { ExtractTrafficViolationsService } from './extract-traffic-violations.service';\n\nconst CONFIG = {\n    BASE_URL: 'https://www.csgt.vn',\n    CAPTCHA_PATH: '/lib/captcha/captcha.class.php',\n    FORM_ENDPOINT: '/?mod=contact&task=tracuu_post&ajax',\n    RESULTS_URL: 'https://www.csgt.vn/tra-cuu-phuong-tien-vi-pham.html',\n    MAX_RETRIES: 20,\n    HEADERS: {\n        USER_AGENT:\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        ACCEPT:\n            'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        CONTENT_TYPE: 'application/x-www-form-urlencoded',\n    },\n};\n\n@Injectable()\nexport class ApiCallerService {\n    private readonly logger = new Logger(ApiCallerService.name);\n\n    private createAxiosInstance(): AxiosInstance {\n        const instance = axios.create({\n            baseURL: CONFIG.BASE_URL,\n            withCredentials: true,\n            timeout: 30000,\n            headers: {\n                'User-Agent': CONFIG.HEADERS.USER_AGENT,\n                Accept: CONFIG.HEADERS.ACCEPT,\n            },\n        });\n\n        // Manually handle cookies if needed\n        instance.interceptors.response.use((response) => {\n            const cookies = response.headers['set-cookie'];\n            if (cookies) {\n                instance.defaults.headers.common['Cookie'] = cookies.join('; ');\n            }\n            return response;\n        });\n\n        return instance;\n    }\n\n    //   private async getCaptcha(instance: AxiosInstance): Promise<string> {\n    //     try {\n    //       const response = await instance.get(CONFIG.CAPTCHA_PATH, {\n    //         responseType: 'arraybuffer',\n    //       });\n    //       const captchaResult = await Tesseract.recognize(\n    //         Buffer.from(response.data),\n    //       );\n    //       return captchaResult.data.text.trim();\n    //     } catch (error) {\n    //       this.logger.error(`Failed to process captcha: ${error.message}`);\n    //       throw new HttpException(\n    //         'Failed to process captcha',\n    //         HttpStatus.INTERNAL_SERVER_ERROR,\n    //       );\n    //     }\n    //   }\n\n    private async getCaptcha(instance: AxiosInstance): Promise<string> {\n        try {\n            this.logger.log('Fetching CAPTCHA image...');\n            const response = await instance.get(CONFIG.CAPTCHA_PATH, {\n                responseType: 'arraybuffer',\n            });\n            this.logger.log('CAPTCHA image fetched, processing with Tesseract...');\n\n            // Create a Tesseract worker with explicit paths\n            const worker = await Tesseract.createWorker({\n                logger: (m) => this.logger.log(m), // Add logging for debugging\n                ...(process.env.NODE_ENV === 'production' ? {\n                    corePath: 'https://unpkg.com/tesseract.js-core@v4.0.0/tesseract-core.wasm',\n                    workerPath: 'https://unpkg.com/tesseract.js@v4.1.2/dist/worker.min.js',\n                    langPath: 'https://tessdata.projectnaptha.com/4.0.0'\n                } : {})\n            });\n\n            // Initialize the worker with English language\n            await worker.loadLanguage('eng');\n            await worker.initialize('eng');\n\n            // Recognize the CAPTCHA text\n            const { data: { text } } = await worker.recognize(Buffer.from(response.data));\n            await worker.terminate(); // Clean up the worker\n\n            this.logger.log(`CAPTCHA text: ${text.trim()}`);\n            return text.trim();\n        } catch (error) {\n            this.logger.error(`Failed to process captcha: ${error.message}`);\n            throw new HttpException(\n                'Failed to process captcha',\n                HttpStatus.INTERNAL_SERVER_ERROR,\n            );\n        }\n    }\n\n    private async postFormData(\n        instance: AxiosInstance,\n        plate: string,\n        captcha: string,\n    ): Promise<any> {\n        const formData = qs.stringify({\n            BienKS: plate,\n            Xe: '1',\n            captcha,\n            ipClient: '9.9.9.91',\n            cUrl: '1',\n        });\n\n        try {\n            return await instance.post(CONFIG.FORM_ENDPOINT, formData, {\n                headers: {\n                    'Content-Type': CONFIG.HEADERS.CONTENT_TYPE,\n                },\n            });\n        } catch (error) {\n            this.logger.error(`Failed to submit form: ${error.message}`);\n            throw new HttpException(\n                'Failed to submit form',\n                HttpStatus.INTERNAL_SERVER_ERROR,\n            );\n        }\n    }\n\n    private async getViolationResults(\n        instance: AxiosInstance,\n        plate: string,\n    ): Promise<any> {\n        try {\n            return await instance.get(\n                `${CONFIG.RESULTS_URL}?&LoaiXe=1&BienKiemSoat=${plate}`,\n            );\n        } catch (error) {\n            this.logger.error(`Failed to fetch results: ${error.message}`);\n            throw new HttpException(\n                'Failed to fetch results',\n                HttpStatus.INTERNAL_SERVER_ERROR,\n            );\n        }\n    }\n\n    async callAPI(\n        plate: string,\n        retries: number = CONFIG.MAX_RETRIES,\n    ): Promise<any> {\n        if (!plate) {\n            throw new HttpException(\n                'License plate is required',\n                HttpStatus.BAD_REQUEST,\n            );\n        }\n\n        this.logger.log(`Fetching traffic violations for plate: ${plate}`);\n        const instance = this.createAxiosInstance();\n\n        try {\n            const captcha = await this.getCaptcha(instance);\n            const response = await this.postFormData(instance, plate, captcha);\n\n            if (response.data === 404) {\n                if (retries > 0) {\n                    this.logger.warn(\n                        `Captcha verification failed. Retrying (${CONFIG.MAX_RETRIES - retries + 1}/${CONFIG.MAX_RETRIES})`,\n                    );\n                    return this.callAPI(plate, retries - 1);\n                } else {\n                    this.logger.error('Maximum retry attempts reached for captcha.');\n                    throw new HttpException(\n                        'Could not verify captcha after maximum retries',\n                        HttpStatus.BAD_REQUEST,\n                    );\n                }\n            }\n\n            const resultsResponse = await this.getViolationResults(instance, plate);\n            const violations =\n                new ExtractTrafficViolationsService().extractTrafficViolations(\n                    resultsResponse.data,\n                );\n\n            return violations || [];\n        } catch (error) {\n            this.logger.error(\n                `Error fetching violations for plate ${plate}: ${error.message}`,\n            );\n            throw new HttpException(\n                error.message,\n                error instanceof HttpException\n                    ? error.getStatus()\n                    : HttpStatus.INTERNAL_SERVER_ERROR,\n            );\n        }\n    }\n}\n"]}