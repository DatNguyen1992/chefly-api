{"version":3,"file":"api-caller.service.js","sourceRoot":"","sources":["../../src/licenses/api-caller.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA+E;AAC/E,kDAA6C;AAC7C,wDAA0C;AAC1C,uCAAyB;AACzB,oDAAsC;AACtC,qEAAkD;AAClD,6FAAuF;AAEvF,MAAM,MAAM,GAAG;IACb,QAAQ,EAAE,qBAAqB;IAC/B,YAAY,EAAE,gCAAgC;IAC9C,aAAa,EAAE,qCAAqC;IACpD,WAAW,EAAE,sDAAsD;IACnE,WAAW,EAAE,CAAC;IACd,OAAO,EAAE;QACP,UAAU,EACR,qHAAqH;QACvH,MAAM,EACJ,4EAA4E;QAC9E,YAAY,EAAE,mCAAmC;KAClD;CACF,CAAC;AAGK,IAAM,gBAAgB,wBAAtB,MAAM,gBAAgB;IAAtB;QACY,WAAM,GAAG,IAAI,eAAM,CAAC,kBAAgB,CAAC,IAAI,CAAC,CAAC;IA2H9D,CAAC;IAzHS,mBAAmB;QACzB,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;QAClC,MAAM,QAAQ,GAAG,IAAA,iCAAO,EACtB,eAAK,CAAC,MAAM,CAAC;YACX,OAAO,EAAE,MAAM,CAAC,QAAQ;YACxB,eAAe,EAAE,IAAI;YACrB,OAAO,EAAE;gBACP,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU;gBACvC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM;aAC9B;YACD,GAAG;SACJ,CAAC,CACH,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,UAAU,CAAC,QAAuB;QAC9C,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE;gBACvD,YAAY,EAAE,aAAa;aAC5B,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,MAAM,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5E,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACxC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACjE,MAAM,IAAI,sBAAa,CACrB,2BAA2B,EAC3B,mBAAU,CAAC,qBAAqB,CACjC,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,YAAY,CACxB,QAAuB,EACvB,KAAa,EACb,OAAe;QAEf,MAAM,QAAQ,GAAG,EAAE,CAAC,SAAS,CAAC;YAC5B,MAAM,EAAE,KAAK;YACb,EAAE,EAAE,GAAG;YACP,OAAO;YACP,QAAQ,EAAE,UAAU;YACpB,IAAI,EAAE,GAAG;SACV,CAAC,CAAC;QAEH,IAAI,CAAC;YACH,OAAO,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,QAAQ,EAAE;gBACzD,OAAO,EAAE;oBACP,cAAc,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY;iBAC5C;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC7D,MAAM,IAAI,sBAAa,CACrB,uBAAuB,EACvB,mBAAU,CAAC,qBAAqB,CACjC,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAC/B,QAAuB,EACvB,KAAa;QAEb,IAAI,CAAC;YACH,OAAO,MAAM,QAAQ,CAAC,GAAG,CACvB,GAAG,MAAM,CAAC,WAAW,2BAA2B,KAAK,EAAE,CACxD,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/D,MAAM,IAAI,sBAAa,CACrB,yBAAyB,EACzB,mBAAU,CAAC,qBAAqB,CACjC,CAAC;QACJ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAAa,EAAE,UAAkB,MAAM,CAAC,WAAW;QAC/D,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,sBAAa,CACrB,2BAA2B,EAC3B,mBAAU,CAAC,WAAW,CACvB,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,0CAA0C,KAAK,EAAE,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE5C,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAEnE,IAAI,QAAQ,CAAC,IAAI,KAAK,GAAG,EAAE,CAAC;gBAC1B,IAAI,OAAO,GAAG,CAAC,EAAE,CAAC;oBAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,0CAA0C,MAAM,CAAC,WAAW,GAAG,OAAO,GAAG,CAAC,IAAI,MAAM,CAAC,WAAW,GAAG,CACpG,CAAC;oBACF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;gBAC1C,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;oBACjE,MAAM,IAAI,sBAAa,CACrB,gDAAgD,EAChD,mBAAU,CAAC,WAAW,CACvB,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACxE,MAAM,UAAU,GAAG,IAAI,oEAA+B,EAAE,CAAC,wBAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAExG,OAAO,UAAU,IAAI,EAAE,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACpF,MAAM,IAAI,sBAAa,CACrB,KAAK,CAAC,OAAO,EACb,KAAK,YAAY,sBAAa;gBAC5B,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE;gBACnB,CAAC,CAAC,mBAAU,CAAC,qBAAqB,CACrC,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAA;AA5HY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;GACA,gBAAgB,CA4H5B","sourcesContent":["import { Injectable, HttpException, HttpStatus, Logger } from '@nestjs/common';\nimport axios, { AxiosInstance } from 'axios';\nimport * as Tesseract from 'tesseract.js';\nimport * as qs from 'qs';\nimport * as tough from 'tough-cookie';\nimport { wrapper } from 'axios-cookiejar-support';\nimport { ExtractTrafficViolationsService } from './extract-traffic-violations.service'; // Adjust path as needed\n\nconst CONFIG = {\n  BASE_URL: 'https://www.csgt.vn',\n  CAPTCHA_PATH: '/lib/captcha/captcha.class.php',\n  FORM_ENDPOINT: '/?mod=contact&task=tracuu_post&ajax',\n  RESULTS_URL: 'https://www.csgt.vn/tra-cuu-phuong-tien-vi-pham.html',\n  MAX_RETRIES: 5,\n  HEADERS: {\n    USER_AGENT:\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    ACCEPT:\n      'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    CONTENT_TYPE: 'application/x-www-form-urlencoded',\n  },\n};\n\n@Injectable()\nexport class ApiCallerService {\n  private readonly logger = new Logger(ApiCallerService.name);\n\n  private createAxiosInstance(): AxiosInstance {\n    const jar = new tough.CookieJar();\n    const instance = wrapper(\n      axios.create({\n        baseURL: CONFIG.BASE_URL,\n        withCredentials: true,\n        headers: {\n          'User-Agent': CONFIG.HEADERS.USER_AGENT,\n          Accept: CONFIG.HEADERS.ACCEPT,\n        },\n        jar,\n      })\n    );\n    return instance;\n  }\n\n  private async getCaptcha(instance: AxiosInstance): Promise<string> {\n    try {\n      const response = await instance.get(CONFIG.CAPTCHA_PATH, {\n        responseType: 'arraybuffer',\n      });\n      const captchaResult = await Tesseract.recognize(Buffer.from(response.data));\n      return captchaResult.data.text.trim();\n    } catch (error) {\n      this.logger.error(`Failed to process captcha: ${error.message}`);\n      throw new HttpException(\n        'Failed to process captcha',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  private async postFormData(\n    instance: AxiosInstance,\n    plate: string,\n    captcha: string,\n  ): Promise<any> {\n    const formData = qs.stringify({\n      BienKS: plate,\n      Xe: '1',\n      captcha,\n      ipClient: '9.9.9.91',\n      cUrl: '1',\n    });\n\n    try {\n      return await instance.post(CONFIG.FORM_ENDPOINT, formData, {\n        headers: {\n          'Content-Type': CONFIG.HEADERS.CONTENT_TYPE,\n        },\n      });\n    } catch (error) {\n      this.logger.error(`Failed to submit form: ${error.message}`);\n      throw new HttpException(\n        'Failed to submit form',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  private async getViolationResults(\n    instance: AxiosInstance,\n    plate: string,\n  ): Promise<any> {\n    try {\n      return await instance.get(\n        `${CONFIG.RESULTS_URL}?&LoaiXe=1&BienKiemSoat=${plate}`,\n      );\n    } catch (error) {\n      this.logger.error(`Failed to fetch results: ${error.message}`);\n      throw new HttpException(\n        'Failed to fetch results',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  async callAPI(plate: string, retries: number = CONFIG.MAX_RETRIES): Promise<any> {\n    if (!plate) {\n      throw new HttpException(\n        'License plate is required',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    this.logger.log(`Fetching traffic violations for plate: ${plate}`);\n    const instance = this.createAxiosInstance();\n\n    try {\n      const captcha = await this.getCaptcha(instance);\n      const response = await this.postFormData(instance, plate, captcha);\n\n      if (response.data === 404) {\n        if (retries > 0) {\n          this.logger.warn(\n            `Captcha verification failed. Retrying (${CONFIG.MAX_RETRIES - retries + 1}/${CONFIG.MAX_RETRIES})`,\n          );\n          return this.callAPI(plate, retries - 1);\n        } else {\n          this.logger.error('Maximum retry attempts reached for captcha.');\n          throw new HttpException(\n            'Could not verify captcha after maximum retries',\n            HttpStatus.BAD_REQUEST,\n          );\n        }\n      }\n\n      const resultsResponse = await this.getViolationResults(instance, plate);\n      const violations = new ExtractTrafficViolationsService().extractTrafficViolations(resultsResponse.data);\n\n      return violations || [];\n    } catch (error) {\n      this.logger.error(`Error fetching violations for plate ${plate}: ${error.message}`);\n      throw new HttpException(\n        error.message,\n        error instanceof HttpException\n          ? error.getStatus()\n          : HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}"]}